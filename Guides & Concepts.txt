Guides & Concepts for leetcode problems

#1 - LeetCode33
    - Name: Search in Rotated Sorted Array
    - Dificulty: Medium
    - Description:
        There is an integer array nums sorted in ascending order (with distinct values).
        Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) 
        such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). 
        For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].
        Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, 
        or -1 if it is not in nums.
        You must write an algorithm with O(log n) runtime complexity.

    + New Concepts
        + Rotated Arrays
            - The procces of rearranging the lements of an array by shifting each element to a new position.
                This is done by rotating the elements of the array clockwise or counterclockwise.
        + O(Log n) -> Binary Search
    
    + Guide
        + Find the pivot point of the array to find where the shift happended
            - If array [1, 2, 3, 4] -> [3, 4, 1, 2] then '1' is the pivot point.
        
        + Perform binary search for the target
            - Start with the middle element of the array and compare it with the target.
            - If the middle element is equal to the target, return the index of the middle element.
            - If the middle element is greater than the target, then the target must be in the left
            half of the array. Otherwise, the target must be in the right half of the array.

#2 Leetcode34
    - Name: Find first and last position of Element in sortet array
    - Dificulty: Medium
    - Description:
        Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.
        If target is not found in the array, return [-1, -1].
        You must write an algorithm with O(log n) runtime complexity.

    + Guide
        + Create a function to perform binary search
            - Needed because it will be used twice to find both ends of the wanted array

#3 LeetCode1
    - Name: Two Sum
    - Dificulty: Easy
    - Description:
        Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
        You may assume that each input would have exactly one solution, and you may not use the same element twice.
        You can return the answer in any order.

#4 LeetCode5
    - Name: Longest Palindrome
    - Dificulty: Medium
    - Description:
        Given a string s, return the longest palindromic substring in s.

#5 LeetCode9
    - Name: Palindrome number
    - Dificulty: Easy
    - Description:
        Given an integer x, return true if x is a  palindrome, and false otherwise.

#6 LeetCode26
    - Remove Duplicates from sorted array
    - Dificulty: Easy
    - Description:
        Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. 
        The relative order of the elements should be kept the same. Then return the number of unique elements in nums.
        Consider the number of unique elements of nums to be k, to get accepted, you need to do the following things:
        
        - Change the array nums such that the first k elements of nums contain the unique elements in the order they were present in nums initially. 
        The remaining elements of nums are not important as well as the size of nums.
        - Return k.

#7 LeetCode50
    - Name: Pow(x, n)
    - Dificulty: Medium
    - Description:
        Implement pow(x, n), which calculates x raised to the power n (i.e., xn).

    + New Concepts
        + Recursion
            - The helper function will call itself using half of 'n' value, multiplying the data with itself.
            - If, during any Recursion, 'n' is an odd number, the result will be multiplied by x as well to make up for the lost value during halving.
   
    + Guide
        + Recursion was chosen to solve the problem in O(Log n) complexity
            - The function will keep breaking the problem down into smaller chunks making the math simpler and easier to complete
            - It will the n add all the smaller solutions up to provide the end result

#8 LeetCode53
    - Name: Maximum Subarray
    - Dificulty: Medium
    - Description:
        Given an integer array nums, find the subarray with the largest sum, and return its sum.

    + Guide
        - Use a recursive function which uses divide & conquer to calculate the subarray
        - The function will call itself to find the maximum sum of the left and right subarrays and
        - The maximum sum of the subarray will be the maximum of the maximum sum of the left
        subarray, the maximum sum of the right subarray, and the sum of the current sub
        array.

#9 LeetCode389
    - Name: Find the Difference
    - Dificulty: Easy
    - Description:
        You are given two strings s and t.
        String t is generated by random shuffling string s and then add one more letter at a random position.
        Return the letter that was added to t.
    
    + New Concepts
        + XOR Operator
            - Used to compare bits, When you XOR two identical characters, the result is 0
            - When you XOR a character with 0, the result is the character itself
    
    + Guide
        - Use XOR on all the characters of both strings 's' and 't'.
        - Since 't' contains all elements of 's' and more, all characters that appear
            in both 's' and 't' will cancel out (Due to XOR) except for the 
            additional character in 't'

#10 LeetCode176
    - Name: Second Highest Salary
    - Dificulty: Medium
    - Description:
        Write a solution to find the second highest salary from the Employee table.
        If there is no second highest salary, return null (return None in Pandas)..
   
    + Guide
        - Find the highest Salary that is not included in the query of the highest salary.

#11 LeetCode100
    - Name: Same Tree
    - Dificulty: Easy
    - Description:
        Given the roots of two binary trees p and q, write a function to check if they are the same or not.
        Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.

    + New Concepts
        + Breadth-First-Search
            - Used to traverse Trees or graphs by recursively calling itself and visiting each tree node!
   
    + Guide
        - Write a recursive BFS function to check the values of both trees and check if they're the same

#12 LeetCode15
    - Name: 3Sum
    - Dificulty: Medium
    - Description:
        Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k,
        and nums[i] + nums[j] + nums[k] == 0.
        Notice that the solution set must not contain duplicate triplets.
   
    + Guide
        - Sort the array first, this makes it easier to not include duplicate values
        - Use a two-pointer technique to find the third element that makes the sum equal to 0
        - After choosing the first element using a for loop, use the two-pointer (left, right) to navigate through the list
            check to see if values are duplicate, or if the sum of the 3 values does not equal 0
            If that, move forward moving the pointers +1 for the left and -1 for the right

#13 LeetCode22
    Name: Generate Parentheses
    Difficulty: Medium
    Description:
        Given `n` pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

    + New Concepts:
        + Dynamic Programming
            - Used to solve problems that have overlapping subproblems, which means that the problem can be broken
                down by recursively calling itself until the base case is reached

        + Guide:
            - Create a helper function to  recursively call
            - Create a list to store the result
            - Use a string to store the current combination
            - Use a counter to keep track of the number of open and close parentheses (Left and Right)
            - If the Left counter is greater than `n`, add an open parenthesis to the current combination
            - If the Right counter is less than the Left one, add a close parenthesis to the current combination
            - If the current combination is valid, add it to the result list
            - Return the result list
